@inject IJSRuntime JsRuntime
@inject ConnectionState ConnectionState
@inject WeatherForecastService Service
@implements IDisposable

@if (ConnectionState.IsOnline)
{
    <div class="row">
        <div class="col-12" style="text-align: right;">
            <button class="btn btn-primary" @onclick="Synchronize">
                <span><i class="fas fa-sync"></i> Sync</span>
            </button>
        </div>
    </div>
    <div class="row">
        <div class="col-12"><div class="alert alert-success" role="alert">Stato applicazione: <b>Online</b></div></div>
    </div>
}
else
{
    <div class="row">
        <div class="col-12">
            <div class="alert alert-danger" role="alert">Stato applicazione: <b>Offline - Connessione assente</b></div>
        </div>
    </div>
}

@code {
    [JSInvokable("OnConnectionStatusChanged")]
    public void OnConnectionStatusChanged(bool isOnline)
    {
        if (ConnectionState.IsOnline != isOnline)
        {
            ConnectionState.IsOnline = isOnline;
        }

        StateHasChanged();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("Connection.Initialize", DotNetObjectReference.Create(this));
        }
    }

    public void Dispose()
    {
        JsRuntime.InvokeVoidAsync("Connection.Dispose");
    }

    public async Task Synchronize() => await Service.Synchronize();
}
